'use strict';

import Model from './model';
import load from '../ckeditor5/load';

export default class Editor extends Model {
	constructor( features ) {
		super();

		console.log( 'Editor.constructor()' );

		this._features = features;
		this.features = new Map();
	}

	init() {
		const promises = [];
		const features = this.features;
		const that = this;

		this._features.forEach( ( feature ) => {
			if ( typeof feature == 'function' ) {
				initFeatureByClass( feature );
			} else {
				initFeatureByName( feature );
			}
		} );

		return Promise.all( promises ).then( () => this );

		function initFeatureByName( featureName ) {
			let featurePath;

			if ( featureName.indexOf( '/' ) == -1 ) {
				featurePath = `../ckeditor5-${ featureName }/${ featureName }`;
			} else {
				featurePath = `../ckeditor5-${ featureName }`;
			}

			promises.push(
				load( featurePath ).then( Feature => initFeatureByClass( Feature.default, featureName ) )
			);
		}

		function initFeatureByClass( Feature, featureName ) {
			const requires = Feature.requires;

			if ( requires ) {
				requires.forEach( ( DepFeature ) => {
					if ( !isAlreadyInited( DepFeature ) ) {
						initFeature( DepFeature );
					}
				} );
			}

			initFeature( Feature, featureName );
		}

		function initFeature( Feature, featureName ) {
			const feature = new Feature( that );

			if ( featureName ) {
				features.set( featureName, feature );
			}

			features.set( Feature, feature );
		}

		function isAlreadyInited( Feature ) {
			return !!features.get( Feature );
		}
	}
}